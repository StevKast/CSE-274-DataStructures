/** * A mutable class that represents a person's name. * * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.0 */public class Name implements Comparable<Name>{	private String first; // First name	private String last; // Last name	public Name() {		this("", "");	} // end default constructor	public Name(String firstName, String lastName) {		first = firstName;		last = lastName;	} // end constructor	public void setName(String firstName, String lastName) {		setFirst(firstName);		setLast(lastName);	} // end setName	public String getName() {		return toString();	} // end getName	public void setFirst(String firstName) {		first = firstName;	} // end setFirst	public String getFirst() {		return first;	} // end getFirst	public void setLast(String lastName) {		last = lastName;	} // end setLast	public String getLast() {		return last;	} // end getLast	public void giveLastNameTo(Name aName) {		aName.setLast(last);	} // end giveLastNameTo	public String toString() {		return first + " " + last;	} // end toString	// TODO: Implement the equals() method.  Recall: the equals() method	// should have Object as its parameter type (why?).	// equals() should test if the parameter is the correct type of object	// using the instanceof operator.	// If the object is the correct type, then equals() should check that	// the data matches.  Note that the object will need to be cast as	// Name in order to access the data.	@Override	public int hashCode() {		final int prime = 31;		int result = 1;		result = prime * result + ((first == null) ? 0 : first.hashCode());		result = prime * result + ((last == null) ? 0 : last.hashCode());		return result;	}	@Override	public boolean equals(Object obj) {		if (this == obj)			return true;		if (obj == null)			return false;		if (getClass() != obj.getClass())			return false;		Name other = (Name) obj;		if (first == null) {			if (other.first != null)				return false;		} else if (!first.equals(other.first))			return false;		if (last == null) {			if (other.last != null)				return false;		} else if (!last.equals(other.last))			return false;		return true;	}	// TODO: Implement the compareTo method by comparing last names. If	// last names are equal, then compare first names. So,	// "Jane Jones" should be before "Amy Smith" (because Jones is before	// Smith).	// "Beth Jones" should be before "Jane Jones" (because Beth is before Jane).	// You are writing the compareTo method for NAMES. You should make use of	// the	// String class compareTo method.	// As with any compareTo method, it should return:	// a negative integer if this is "smaller than" (or comes before) other	// a positive integer if this is "greater than" (or comes after) other	// zero if this is equal to other	@Override	public int compareTo(Name arg0) {		if(!this.last.equals(arg0.last)){			return this.last.compareTo(arg0.last);		}else{			return this.first.compareTo(arg0.first);		}	}} // end Name